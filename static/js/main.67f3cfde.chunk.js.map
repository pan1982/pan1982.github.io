{"version":3,"sources":["todo.js","todoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","props","todo","deleteTodo","index","_useState","useState","_useState2","Object","slicedToArray","done","setDone","react_default","a","createElement","style","textDecoration","color","position","padding","onClick","value","cursor","right","top","ToDoList","todoList","margin","map","i","src_todo","key","id","App","setToDo","_useState3","_useState4","setToDoList","_useState5","length","setToDoLength","className","htmlFor","type","onChange","e","target","list","item","push","alert","addTodo","src_todoList","splice","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAyCeA,MAnCf,SAAcC,GAAO,IACXC,EAA4BD,EAA5BC,KAAMC,EAAsBF,EAAtBE,WAAYC,EAAUH,EAAVG,MADPC,EAEKC,oBAAS,GAFdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEZK,EAFYH,EAAA,GAENI,EAFMJ,EAAA,GAGnB,OACEK,EAAAC,EAAAC,cAAA,MACEC,MAAO,CACLC,eAAgBN,EAAO,eAAiB,OACxCO,MAAOP,EAAO,MAAQ,QACtBQ,SAAU,WACVC,QAAS,QAGXC,QAAS,kBAAMT,GAASD,KACxBR,EAAKmB,MACLT,EAAAC,EAAAC,cAAA,QACEM,QAAS,kBAAMjB,EAAWC,IAC1BW,MAAO,CACLI,QAAS,OACTG,OAAQ,UACRJ,SAAU,WACVK,MAAO,MACPC,IAAK,QAEP,UCTOC,MAdf,SAAkBxB,GAAO,IACfyB,EAAyBzB,EAAzByB,SAAUvB,EAAeF,EAAfE,WAClB,OACES,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAAEY,OAAQ,QAClBD,EAASE,IAAI,SAAC1B,EAAM2B,GAAP,OAAajB,EAAAC,EAAAC,cAACgB,EAAD,CAAMC,IAAK7B,EAAK8B,GAAI9B,KAAMA,EAAMC,WAAYA,EAAYC,MAAOyB,QC+BjFI,MArCf,WAAe,IAAA5B,EACWC,mBAAS,IADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNH,EADMK,EAAA,GACA2B,EADA3B,EAAA,GAAA4B,EAEmB7B,mBAAS,IAF5B8B,EAAA5B,OAAAC,EAAA,EAAAD,CAAA2B,EAAA,GAENT,EAFMU,EAAA,GAEIC,EAFJD,EAAA,GAAAE,EAGahC,mBAASoB,EAASa,QAAnCC,EAHIhC,OAAAC,EAAA,EAAAD,CAAA8B,EAAA,MAwBb,OACE1B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,OACb7B,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAO4B,QAAQ,cAAf,aACE9B,EAAAC,EAAAC,cAAA,SAAOkB,GAAG,aAAaW,KAAK,OAAOtB,MAAOnB,EAAM0C,SAAU,SAAAC,GAAC,OAAIX,EAAQW,EAAEC,OAAOzB,WAElFT,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,SAASvB,QAAS,kBAzBrB,WACd,IAAM2B,EAAOrB,EACPsB,EAAO,CAAE3B,MAAOnB,EAAM8B,GAAIN,EAASa,OAAS,GAC9CrC,GACF6C,EAAKE,KAAKD,GACVX,EAAYU,GACZb,EAAQ,IACRM,EAAcO,EAAKR,SAEnBW,MAAM,8BAgBiCC,KAArC,aAEFvC,EAAAC,EAAAC,cAACsC,EAAD,CAAU1B,SAAUA,EAAUvB,WAdf,SAACC,GAClB,IAAM2C,EAAOrB,EACbqB,EAAKM,OAAOjD,EAAO,GACnBoC,EAAcO,EAAKR,aCbHe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.67f3cfde.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport PropType from 'prop-types';\r\nimport React, { useState } from 'react';\r\n\r\nfunction ToDo(props) {\r\n  const { todo, deleteTodo, index } = props;\r\n  const [done, setDone] = useState(false);\r\n  return (\r\n    <li\r\n      style={{\r\n        textDecoration: done ? 'line-through' : 'none',\r\n        color: done ? 'red' : 'black',\r\n        position: 'relative',\r\n        padding: '10px',\r\n        // listStyleType: 'none',\r\n      }}\r\n      onClick={() => setDone(!done)}\r\n    >{todo.value}\r\n      <span\r\n        onClick={() => deleteTodo(index)}\r\n        style={{\r\n          padding: '20px',\r\n          cursor: 'pointer',\r\n          position: 'absolute',\r\n          right: '0px',\r\n          top: '0px',\r\n        }}\r\n      >{'\\u00D7'}\r\n      </span>\r\n    </li>\r\n  );\r\n}\r\n\r\nToDo.propTypes = {\r\n  todo: PropType.object.isRequired,\r\n  deleteTodo: PropType.func.isRequired,\r\n  index: PropType.number.isRequired,\r\n};\r\n\r\nexport default ToDo;\r\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport PropType from 'prop-types';\r\nimport React from 'react';\r\nimport ToDo from './todo';\r\n\r\nfunction ToDoList(props) {\r\n  const { todoList, deleteTodo } = props;\r\n  return (\r\n    <ol style={{ margin: '0px' }}>\r\n      {todoList.map((todo, i) => <ToDo key={todo.id} todo={todo} deleteTodo={deleteTodo} index={i} />)}\r\n    </ol>\r\n  );\r\n}\r\n\r\nToDoList.propTypes = {\r\n  todoList: PropType.array.isRequired,\r\n  deleteTodo: PropType.func.isRequired,\r\n};\r\n\r\nexport default ToDoList;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport ToDoList from './todoList';\n\nfunction App() {\n  const [todo, setToDo] = useState('');\n  const [todoList, setToDoList] = useState([]);\n  const [, setToDoLength] = useState(todoList.length);\n\n  const addTodo = () => {\n    const list = todoList;\n    const item = { value: todo, id: todoList.length + 1 };\n    if (todo) {\n      list.push(item);\n      setToDoList(list);\n      setToDo('');\n      setToDoLength(list.length);\n    } else {\n      alert('Write something into input');\n    }\n  };\n\n  const deleteTodo = (index) => {\n    const list = todoList;\n    list.splice(index, 1);\n    setToDoLength(list.length);\n  };\n\n  return (\n    <div className=\"App\">\n      <form>\n        <label htmlFor=\"todo_input\"> New Todo:\n          <input id=\"todo_input\" type=\"text\" value={todo} onChange={e => setToDo(e.target.value)} />\n        </label>\n        <button type=\"button\" onClick={() => addTodo()}>Add Todo</button>\n      </form>\n      <ToDoList todoList={todoList} deleteTodo={deleteTodo} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}