{"version":3,"sources":["reducers/films/index.js","reducers/index.js","store.jsx","App.js","utils/routes.js","serviceWorker.js","index.js"],"names":["moviesReducer","combineReducers","films","filmsReducer","rootReducer","movies","configureStore","createStore","App","react_default","a","createElement","Navbar","color","NavbarBrand","Nav","NavItem","NavLink","href","store","Routes","react_router_dom","es","react_router","exact","path","render","src_App","Boolean","window","location","hostname","match","ReactDOM","routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAQeA,EAJOC,YAAgB,CACpCC,MAAOC,MCEMC,EAJKH,YAAgB,CAClCI,OAAQL,ICgBKM,EAfQ,WAMnB,OAHcC,YACZH,kDCeSI,MAlBf,WACE,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAM,WACZJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,eACAL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAASC,KAAK,KAAd,UAEFT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAASC,KAAK,KAAd,YCPJC,EAAQb,IAgBCc,MAdf,WACE,OACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAUH,MAAOA,GACfV,EAAAC,EAAAC,cAAA,WAGEF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAMjB,EAAAC,EAAAC,cAACgB,EAAD,aCL1BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OAAOjB,EAAAC,EAAAC,cAACuB,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.96ff09e5.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport filmsReducer from './filmsReducer';\r\n\r\n\r\nconst moviesReducer = combineReducers({\r\n  films: filmsReducer,\r\n});\r\n\r\nexport default moviesReducer;\r\n","import { combineReducers } from 'redux';\r\nimport moviesReducer from './films/index';\r\n\r\nconst rootReducer = combineReducers({\r\n  movies: moviesReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\n\r\nconst configureStore = () => {\r\n  // Strip out any dev middleware for production\r\n  if (process.env.NODE_ENV === 'production') {\r\n    const store = createStore(\r\n      rootReducer,\r\n    );\r\n    return store;\r\n  }\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n  );\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import React from 'react';\nimport {\n  Row, Col, Container, Navbar, NavbarBrand, NavItem, Nav, NavLink,\n} from 'reactstrap';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Navbar color=\"success\">\n      <NavbarBrand>Morbax</NavbarBrand>\n      <Nav>\n        <NavItem>\n          <NavLink href=\"#\">Films</NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink href=\"#\">Show</NavLink>\n        </NavItem>\n      </Nav>\n\n    </Navbar>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from '../store';\r\nimport App from '../App';\r\n// import Header from './App/Header';\r\n// import ScrollToTop from './sections/utils/scrollToTop';\r\n\r\nconst store = configureStore();\r\n\r\nfunction Routes() {\r\n  return (\r\n    <Router>\r\n      <Provider store={store}>\r\n        <div>\r\n          {/* <ScrollToTop />\r\n          <Header /> */}\r\n          <Route exact path=\"/\" render={() => <App />} />\r\n        </div>\r\n      </Provider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './utils/routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}