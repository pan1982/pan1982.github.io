{"version":3,"sources":["users/User.js","App.js","reportWebVitals.js","index.js"],"names":["process","REACT_APP_API_TOKEN","User","props","userData","repos","fetchRepos","useState","repoName","setRepoName","userRepos","setUserRepos","isInitialMount","useRef","useEffect","current","filter","repo","name","includes","className","Row","Col","sm","src","avatar_url","alt","email","location","created_at","followers","following","bio","Form","FormGroup","Input","onChange","e","target","value","placeholder","disabled","length","map","href","html_url","rel","forks","stargazers_count","id","public_repos","Spinner","type","color","gitHubURL","gitClientId","params","URLSearchParams","window","search","substring","App","userName","setUserName","users","setUsers","activeUser","setActiveUser","isOpen","setIsOpen","innerWidth","screenWidth","setScreenWidth","isUsersLoading","setIsUsersLoading","setRepos","token","localStorage","getItem","fetch","repos_url","headers","then","response","json","data","addEventListener","get","method","accept","setItem","access_token","url","usersFull","list","items","forEach","user","a","login","fetchResult","push","fetchUsers","open","Container","md","onClick","Collapse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment","document","getElementById"],"mappings":"8UAcoBA,gSAAYC,oBAqEjBC,MAnEf,SAAcC,GAAQ,IACVC,EAAgCD,EAAhCC,SAAUC,EAAsBF,EAAtBE,MAAOC,EAAeH,EAAfG,WADR,EAEeC,mBAAS,IAFxB,mBAEVC,EAFU,KAEAC,EAFA,OAGiBF,mBAASF,GAH1B,mBAGVK,EAHU,KAGCC,EAHD,KAKXC,EAAiBC,kBAAO,GAkB9B,OAhBAC,qBAAU,WACNR,EAAWF,KACZ,IAEHU,qBAAU,WACFF,EAAeG,QACfH,EAAeG,SAAU,EAEzBJ,EAAaN,MAIrBS,qBAAU,WACNH,EAAaN,EAAMW,QAAQ,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,SAASX,SACvD,CAACA,IAGA,sBAAKY,UAAU,kBAAf,UACI,eAACC,EAAA,EAAD,CAAKD,UAAU,yBAAf,UACI,cAACE,EAAA,EAAD,CAAKC,GAAG,IAAIH,UAAU,oBAAtB,SAA0C,qBAAKA,UAAU,cAAcI,IAAKpB,EAASqB,WAAYC,IAAI,aACrG,eAACJ,EAAA,EAAD,CAAKC,GAAG,IAAIH,UAAU,gBAAtB,UACI,0CAAY,4BAAIhB,EAASc,UACzB,2CAAa,4BAAId,EAASuB,WAC1B,8CAAgB,4BAAIvB,EAASwB,cAC7B,+CAAiB,4BAAIxB,EAASyB,gBAC9B,+CAAiB,4BAAIzB,EAAS0B,eAC9B,+CAAiB,4BAAI1B,EAAS2B,qBAGrC3B,EAAS4B,KACV,qBACIZ,UAAU,WADd,SAEEhB,EAAS4B,MAEX,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,SAAU,SAACC,GAAD,OAAO5B,EAAY4B,EAAEC,OAAOC,QACtCA,MAAO/B,EACPgC,YAAY,yBACZC,SAA+B,IAArB/B,EAAUgC,aAI/BhC,EAAUgC,OAAShC,EAAUM,QAAQ,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,SAASX,MAAYmC,KAAI,SAAA1B,GAC7E,OACA,sBAAmBG,UAAU,0BAA7B,UACI,8BAAK,mBAAGwB,KAAM3B,EAAK4B,SAAUP,OAAO,SAASQ,IAAI,aAA5C,SAA0D7B,EAAKC,SACpE,gCACI,iCAAOD,EAAK8B,MAAZ,YACA,iCAAO9B,EAAK+B,iBAAZ,iBAJE/B,EAAKgC,OAQf7C,EAAS8C,aAAe,GAAK,cAACC,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,kBC9DlEC,EAAYtD,0BACZuD,EAAcvD,uBAIdwD,EAAS,IAAIC,gBAAgBC,OAAO9B,SAAS+B,OAAOC,UAAU,IAoJrDC,MAxIf,WAAgB,IAAD,EACmBtD,mBAAS,IAD5B,mBACNuD,EADM,KACIC,EADJ,OAEaxD,mBAAS,IAFtB,mBAENyD,EAFM,KAECC,EAFD,OAGuB1D,qBAHvB,mBAGN2D,EAHM,KAGMC,EAHN,OAIe5D,oBAAS,GAJxB,mBAIN6D,EAJM,KAIEC,EAJF,OAK0B9D,mBAASmD,OAAOY,YAL1C,mBAKNC,EALM,KAKOC,EALP,OAM+BjE,oBAAS,GANxC,mBAMNkE,EANM,KAMUC,EANV,OAOanE,mBAAS,IAPtB,mBAONF,EAPM,KAOCsE,EAPD,KAUPrE,EAAa,SAACF,GAClB,IAAMwE,EAAQC,aAAaC,QAAQ,SACnCH,EAAS,IACTI,MAAM3E,EAAS4E,UAAW,CACtBC,QAAS,CACP,cAAgB,SAAhB,OAA0BL,MAG/BM,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACJV,EAASU,OAgEf,OAlBAvE,qBAAU,WACR4C,OAAO4B,iBAAiB,UAAU,WAChCd,EAAed,OAAOY,kBAI1BxD,qBAAU,WAED0C,EAAO+B,IAAI,SAjDlBR,MAAM,yDAAD,OAA0DxB,EAA1D,0BAzCevD,2CAyCf,iBAA+GwD,EAAO+B,IAAI,SAAW,CACxIC,OAAQ,OACRP,QAAS,CACPQ,OAAQ,sBAETP,MAAK,SAAAC,GACNN,aAAaa,QAAQ,QAASP,EAASE,KAAKM,iBAI7B,SAACC,GAClB,IAAMhB,EAAQC,aAAaC,QAAQ,SACnCC,MAAM,GAAD,OAAIzB,GAAJ,OAAgBsC,GAAO,CACxBX,QAAS,CACP,cAAgB,SAAhB,OAA0BL,MAG/BM,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACN,IAAMQ,EAAY,GACZC,EAAOT,EAAKU,OAASV,EAC3BS,EAAKE,QAAL,uCAAa,WAAMC,GAAN,iBAAAC,EAAA,sEACenB,MAAM,GAAD,OAAIzB,EAAJ,iBAAsB2C,EAAKE,OAAS,CACjElB,QAAS,CACP,cAAgB,SAAhB,OAA0BL,MAHnB,cACLwB,EADK,gBAMYA,EAAYhB,OANxB,OAMLhF,EANK,OAOXyF,EAAUQ,KAAKjG,GACXyF,EAAUnD,SAAWoD,EAAKpD,SAC5BuB,EAAS4B,GACTnB,GAAkB,GAClBP,EAAc0B,EAAU,KAXf,2CAAb,0DA+BES,CAAWxC,EAAQ,qCAAiCA,EAAjC,qDAHnBJ,OAAO6C,KAAP,6DAAkEhD,MAMrE,CAACO,IAIF,cAAC0C,EAAA,EAAD,UACE,eAACnF,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKmF,GAAG,IAAIrF,UAAU,qBAAtB,UACE,cAACa,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAOC,SAAU,SAACC,GAAD,OAAO0B,EAAY1B,EAAEC,OAAOC,QAAQA,MAAOuB,EAAUtB,YAAY,yBAGpFiC,EAsBA,gCACE,4CACA,cAACtB,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,iBAxBX,qBAAKjC,UAAU,oBAAf,SAChB4C,EAAMrB,KAAI,SAAAsD,GACV,OACE,sBAEE7E,UAAS,0CAAqC8C,IAAe+B,EAAO,UAAY,IAChFS,QAAS,WAAOvC,EAAc8B,GAnCzB5B,GAAWD,GAmC+B9D,EAAW2F,IAH5D,UAKE,sBAAK7E,UAAU,qBAAf,UACE,qBAAKA,UAAU,cAAcI,IAAKyE,EAAKxE,WAAYC,IAAI,WACvD,+BAAOuE,EAAK/E,MAAQ+E,EAAKE,QACzB,0CAAaF,EAAK/C,mBAEnBqB,GAxHC,KAyHA,cAACoC,EAAA,EAAD,CAAUvF,UAAU,OAAOgD,OAAQA,GAAUF,IAAe+B,EAA5D,SACE,cAAC,EAAD,CAAM7F,SAAU8D,GAAcF,EAAM,GAAK3D,MAAOA,EAAOC,WAAYA,QAXlE2F,EAAKhD,YAyBrBsB,EAxIa,KAyIV,cAACjD,EAAA,EAAD,CAAKmF,GAAG,IAAIrF,UAAU,oBAAtB,SACE4C,EAAMtB,QAAU,cAAC,EAAD,CAAMtC,SAAU8D,GAAcF,EAAM,GAAM3D,MAAOA,EAAOC,WAAYA,YCjJjFsG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,SAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.de0eb1e5.chunk.js","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\r\nimport { \r\n  Collapse, \r\n  Form, \r\n  FormGroup, \r\n  Label, \r\n  Input,\r\n  Row,\r\n  Col,\r\n  Spinner\r\n} from 'reactstrap';\r\nimport '../App.css';\r\n\r\nconst gitHubURL = process.env.REACT_APP_GITHUB_URL;\r\nconst gitHubToken = process.env.REACT_APP_API_TOKEN;\r\n\r\nfunction User(props) {\r\n    const { userData, repos, fetchRepos } = props;\r\n    const [repoName, setRepoName] = useState('');\r\n    const [userRepos, setUserRepos] = useState(repos);\r\n\r\n    const isInitialMount = useRef(true);\r\n\r\n    useEffect(() => {\r\n        fetchRepos(userData);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isInitialMount.current) {\r\n            isInitialMount.current = false;\r\n         } else {\r\n            setUserRepos(repos);\r\n         }    // your update codes goes here\r\n    });\r\n\r\n    useEffect(() => {\r\n        setUserRepos(repos.filter((repo => repo.name.includes(repoName) )));\r\n    }, [repoName]);\r\n\r\n    return (\r\n        <div className=\"df fdc jcc w100\">\r\n            <Row className=\"df user-features-block\">\r\n                <Col sm=\"4\" className=\"user-avatar-block\"><img className=\"user-avatar\" src={userData.avatar_url} alt=\"avatar\"/></Col>\r\n                <Col sm=\"8\" className=\"user-features\">\r\n                    <span>Name: <b>{userData.name}</b></span>\r\n                    <span>Email: <b>{userData.email}</b></span>\r\n                    <span>Location: <b>{userData.location}</b></span>\r\n                    <span>Join Date: <b>{userData.created_at}</b></span>\r\n                    <span>Followers: <b>{userData.followers}</b></span>\r\n                    <span>Following: <b>{userData.following}</b></span>\r\n                </Col>\r\n            </Row>\r\n            {userData.bio && \r\n            <div \r\n                className=\"user-bio\"\r\n            >{userData.bio}\r\n            </div>}\r\n            <Form>\r\n                <FormGroup>\r\n                    <Input \r\n                        onChange={(e) => setRepoName(e.target.value)} \r\n                        value={repoName} \r\n                        placeholder=\"Search for User's Repo\"\r\n                        disabled={userRepos.length === 0}\r\n                    />\r\n                </FormGroup>\r\n            </Form>\r\n            {userRepos.length ? userRepos.filter((repo => repo.name.includes(repoName))).map(repo => {\r\n                return (\r\n                <div key={repo.id} className=\"repo-data df jcsb dfaic\">\r\n                    <div><a href={repo.html_url} target=\"_blank\" rel=\"noreferrer\">{repo.name}</a></div>\r\n                    <div>\r\n                        <span>{repo.forks} Forks</span>\r\n                        <span>{repo.stargazers_count} Stars</span>\r\n                    </div>\r\n                </div>)\r\n            }) : (\r\n                userData.public_repos > 0 && <Spinner type=\"grow\" color=\"secondary\" />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User;","import React, {useEffect, useState} from 'react';\nimport { \n  Collapse, \n  Form, \n  FormGroup, \n  Label, \n  Input,\n  Container,\n  Row,\n  Col,\n  Spinner\n} from 'reactstrap';\nimport User from './users/User';\nimport './App.css';\n\nconst gitHubURL = process.env.REACT_APP_GITHUB_URL;\nconst gitClientId = process.env.REACT_APP_CLIENT_ID;\nconst gitClientSecret = process.env.REACT_APP_CLIENT_SECRET;\n\nconst mobileWidth = 767;\nconst params = new URLSearchParams(window.location.search.substring(1));\n\n\n// const fakeUsers = (function() {\n//   const res = [];\n//   for(let i = 1; i < 100; i++) {\n//     res.push({id: i, name: 'Test User' + i, repos: Math.floor(Math.random() * 10)})\n//   }\n//   return res;\n// })()\n\n\nfunction App() {\n  const [userName, setUserName] = useState('');\n  const [users, setUsers] = useState([]);\n  const [activeUser, setActiveUser] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n  const [screenWidth, setScreenWidth]  = useState(window.innerWidth);\n  const [isUsersLoading, setIsUsersLoading] = useState(true);\n  const [repos, setRepos] = useState([]);\n\n\n  const fetchRepos = (userData) => {\n    const token = localStorage.getItem('token');\n    setRepos([]);\n    fetch(userData.repos_url, {\n        headers: {\n          'Authorization': `token ${token}`,\n        }\n    })\n    .then(response => {\n      return response.json();\n    }).then(data => {\n        setRepos(data);\n    });\n  }\n\n  const getToken = () => {\n    fetch(`https://github.com/login/oauth/access_token?client_id=${gitClientId}&client_secret=${gitClientSecret}&code=${params.get('code')}`, {\n      method: 'post',\n      headers: {\n        accept: 'application/json',\n      }\n    }).then(response => {\n      localStorage.setItem('token', response.data.access_token);\n    });\n  }\n\n  const fetchUsers = (url) => {\n    const token = localStorage.getItem('token');\n    fetch(`${gitHubURL}${url}`, {\n        headers: {\n          'Authorization': `token ${token}`,\n        }\n    })\n    .then(response => {\n      return response.json();\n    }).then(data => {\n      const usersFull = [];\n      const list = data.items || data;\n      list.forEach(async user => {\n        const fetchResult = await fetch(`${gitHubURL}users/${user.login}`, {\n          headers: {\n            'Authorization': `token ${token}`,\n          }\n        });\n        const userData = await fetchResult.json();\n        usersFull.push(userData);\n        if (usersFull.length === list.length) {\n          setUsers(usersFull);\n          setIsUsersLoading(false);\n          setActiveUser(usersFull[0]);\n        }\n      });\n    })\n}\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  useEffect(() => {\n    window.addEventListener('resize', () => {\n      setScreenWidth(window.innerWidth);\n    })\n  });\n\n  useEffect(() => {\n      \n      if (!params.get('code')) {\n        window.open(`https://github.com/login/oauth/authorize?client_id=${gitClientId}`);\n      } else {\n        getToken();\n        fetchUsers(userName ? `search/users?per_page=25&q=${userName}+in:name+in:login+type:user` : `users?per_page=25`);\n      }\n      \n  }, [userName]);\n\n\n  return (\n    <Container>\n      <Row>\n        <Col md=\"6\" className=\"screen users-block\">\n          <Form>\n            <FormGroup>\n              <Input onChange={(e) => setUserName(e.target.value)} value={userName} placeholder=\"Search for Users\"/>\n            </FormGroup>\n          </Form>\n          {!isUsersLoading ? (<div className=\"users-block_items\">\n             {users.map(user => {\n              return (\n                <div \n                  key={user.id} \n                  className={`user-item w100 jcsb df fdc dfaic${activeUser === user ? \" active\" : \"\"}`} \n                  onClick={() => {setActiveUser(user); toggle(); fetchRepos(user);}}\n                >\n                  <div className=\"df dfaic jcsb w100\">\n                    <img className=\"user-avatar\" src={user.avatar_url} alt=\"avatar\"/>\n                    <span>{user.name || user.login}</span>\n                    <span>Repo: {user.public_repos}</span>\n                  </div>\n                  {screenWidth <= mobileWidth &&\n                    <Collapse className=\"w100\" isOpen={isOpen && activeUser === user}>\n                      <User userData={activeUser || users[0] } repos={repos} fetchRepos={fetchRepos}/>\n                    </Collapse>\n                  }\n                </div>\n              );\n            })}\n          </div>) : (\n            <div>\n              <p>Loading ...</p>\n              <Spinner type=\"grow\" color=\"secondary\" />\n            </div>\n            \n          )}\n        </Col>\n      {screenWidth > mobileWidth &&\n          <Col md=\"6\" className=\"screen user-block\">\n          { users.length && <User userData={activeUser || users[0] }  repos={repos} fetchRepos={fetchRepos}/>}\n        </Col>\n      }\n\n      </Row>\n\n      \n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}